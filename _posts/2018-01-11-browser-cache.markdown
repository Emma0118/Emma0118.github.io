---
layout: post
title: 浏览器缓存小结
date: 2016-01-11 15:32:24.000000000 +09:00
---
<h3>缓存分类</h3>
<p>广义的web缓存包含很多种，常见的比如数据库缓存、代理服务器缓存、CDN缓存、和今天要讨论的浏览器缓存。</p>
<p>浏览器缓存是提高网页性能和用户体验以及减少服务器处理请求的重要方式，其实现方式主要通过在会话过程中通过检查缓存的文件是否足够新来判断获取数据的方式，并且在后退网页时，访问过的资源直接从缓存中获取</p>



<h3>浏览器缓存及基本认知</h3>
<em>浏览器缓存分为强缓存和协商缓存</em>,浏览器通过http header判断实行强缓存策略还是协商缓存策略，其基本如下：
<p>1.浏览器在加载资源时，会首先根据http headers的Expires或Cache-control判断它是否满足强缓存，如果满足，浏览器直接从自己的缓存中读取资源，不会发送任何请求</p>
<p>2.如果不满足强缓存，浏览器则发送请求道服务器，服务器根据request headers验证请求的资源是否满足协商缓存，如果满足，服务器会返回请求，但是不会携带浏览器请求的资源，而是告诉浏览器可以直接从缓存中加载资源，于是浏览器又从自己的缓存中去加载这个资源</p>
<p>如果满足强缓存或者协商缓存，浏览器都会从客户端缓存中加载资源；但是强缓存并不会发送请求道服务器，而协商缓存会发送一个请求到服务器</p>
<p>如果两种缓存都不满足，浏览器只能直接从服务器加载资源数据</p>

<h3>强缓存原理及应用</h3>
<p>1.首先，浏览器第一次跟服务器请求资源时，服务器在返回资源的同时，在response的headers里会加上Expires或Cache-control，表示资源在客户端缓存的有效期，其中，Expires是绝对时间，是一个较老的缓存管理header，当服务器的时间和客户端的时间相差较大时，容易出现错误，比如，当手动修改客户端时间时，会影响缓存命中的结果。Cache-control是相对时间， 在http1.1中提出，以秒为单位。</p>
这两个header可以只启用一个，也可以同时启用，由于Cache-control的缓存管理更有效更安全，所以当同时启用时，Cache-control的优先级高于Expires。
<p>2.浏览器在接收到资源后，会将资源和response header 一起缓存起来；</p>
<p>3.当浏览器再次请求统一资源时，先从缓存中寻找，根据它第一次请求时间和Cache-control设定的有效期，计算出一个资源过期时间，再拿这个过期时间和当前请求时间比较，如果请求时间再过期时间之前，就命中缓存，否则就不行。</p>
<p>4.如果缓存没有命中，浏览器直接从服务器加载资源时，Cache-control header 在重新加载时会被更新。</p>
### 强缓存管理和设置</h3>
一般可以使用2种方式来设置是有启用强缓存
1. 通过代码的方式，在web服务器返回的响应中添加 Expires 和 Cache-Control Header;
比如在PHP接口中，header('Cache-Control: max-age=3600*24');
2. 通过配置web服务器的方式，让web服务器在响应资源的时候统一添加  Expires 和 Cache-Control Header;
比如在nginx的config文件中，
```bash
1    # 相关页面设置Cache-Control头信息,dns及cdn目录配置10天
2
3    if ($request_uri ~* "^/$|^/dns/.+/|^/cdn/.+/") {
4      add_header    Cache-Control  max-age=864000;
5    }
6
7    if ($request_uri ~* "^/linux/|^/t/") {
8      add_header    Cache-Control  max-age=86400;
9    }
```








